services:
  grafana:
    image: grafana/grafana:12.2.0@sha256:74144189b38447facf737dfd0f3906e42e0776212bf575dc3334c3609183adf7
    container_name: grafana
    restart: unless-stopped
    labels:
      - traefik.http.routers.grafana.rule=Host(`grafana.spaceduck.cloud`)
      - traefik.http.services.grafana.loadbalancer.server.port=3000
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=letsencryptprod
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - grafana
      - traefik
      - auth
    environment:
      LDAP_BIND_PASSWORD: ${LDAP_BIND_PASSWORD}
    configs:
      - source: grafana_ini
        target: /etc/grafana/grafana.ini
      - source: grafana_ldap
        target: /etc/grafana/ldap.toml
      - source: grafana_loki
        target: /etc/grafana/provisioning/datasources/ds.yaml

  loki:
    image: grafana/loki:3.5.7@sha256:0eaee7bf39cc83aaef46914fb58f287d4f4c4be6ec96b86c2ed55719a75e49c8
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - grafana

  prometheus:
    image: prom/prometheus:v3.6.0
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    networks:
      - grafana

  alloy:
    image: grafana/alloy:v1.11.2@sha256:6ab34b8201f0e8b0c4346be4934c9965723af3f7f21dd9a65fd73f270f69b451
    privileged: true
    ports:
     - 12345:12345
     # - 4317:4317
     # - 4318:4318
    environment:
      ALLOY_DEPLOY_MODE: docker
    volumes:
      - /proc:/rootproc:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys:ro
      - /:/rootfs:ro
      - /dev/disk/:/dev/disk:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    extra_hosts:
        - "host.docker.internal:host-gateway"
    devices:
        - /dev/kmsg
    configs:
      - source: alloy_config
        target: /etc/alloy/config.alloy
    networks:
      - grafana

networks:
  traefik:
    name: traefik_default
    external: true
  auth:
    name: auth_auth
    external: true
  grafana:
volumes:
  grafana_data:
    driver: local
configs:
  grafana_ini:
    content: |
      [auth.ldap]
      enabled = true
      config_file = /etc/grafana/ldap.toml
      allow_sign_up = true
  grafana_ldap:
    content: |
      [[servers]]
      host = "lldap"
      port = 3890
      timeout = 10

      bind_dn = "uid=grafana_bind,ou=people,dc=spaceduck,dc=cloud"
      bind_password = '$$__env{LDAP_BIND_PASSWORD}'


      search_filter = "(uid=%s)"
      search_base_dns = ["dc=spaceduck,dc=cloud"]
      # group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
      # group_search_filter_user_attribute = "distinguishedName"
      # group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]

      [servers.attributes]
      member_of = "memberOf"
      email = "mail"
      name = "displayName"
      surname = "sn"
      username = "uid"

      [[servers.group_mappings]]
      group_dn = "cn=superadmins,ou=groups,dc=spaceduck,dc=cloud"
      org_role = "Admin"
      grafana_admin = true
  grafana_loki:
    content: |
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
  alloy_config:
    content: |
      // ###############################
      // #### Metrics Configuration ####
      // ###############################

      // Host Cadvisor on the Docker socket to expose container metrics.
      prometheus.exporter.cadvisor "example" {
        docker_only = true
      }

      discovery.relabel "example" {
          targets = prometheus.exporter.cadvisor.example.targets

          rule {
              target_label = "job"
              replacement  = "integrations/docker"
          }

          rule {
              target_label = "instance"
              replacement  = constants.hostname
          }
      }

      // Configure a prometheus.scrape component to collect cadvisor metrics.
      prometheus.scrape "scraper" {
        targets    = discovery.relabel.example.output
        forward_to = [ prometheus.remote_write.demo.receiver ]


        scrape_interval = "10s"
      }

      // Configure a prometheus.remote_write component to send metrics to a Prometheus server.
      prometheus.remote_write "demo" {
        endpoint {
          url = "http://prometheus:9090/api/v1/write"
        }
      }

      // ###############################
      // #### Logging Configuration ####
      // ###############################

      // Discover Docker containers and extract metadata.
      discovery.docker "linux" {
        host = "unix:///var/run/docker.sock"
      }

      // Define a relabeling rule to create a service name from the container name.
      discovery.relabel "logs_integrations_docker" {
            targets = []
        
            rule {
                source_labels = ["__meta_docker_container_name"]
                regex = "/(.*)"
                target_label = "container_name"
            }

           rule {
              target_label = "instance"
              replacement  = constants.hostname
          }

        }


      // Configure a loki.source.docker component to collect logs from Docker containers.
      loki.source.docker "default" {
        host       = "unix:///var/run/docker.sock"
        targets    = discovery.docker.linux.targets
        relabel_rules = discovery.relabel.logs_integrations_docker.rules
        forward_to = [loki.write.local.receiver]
      }

      loki.write "local" {
        endpoint {
          url = "http://loki:3100/loki/api/v1/push"
        }
      }
